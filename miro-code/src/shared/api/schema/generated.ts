/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/signIn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Вход пользователя в систему
         * @description Аутентифицирует пользователя и возвращает JWT токен для доступа к защищенным ресурсам
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Вход выполнен успешно */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JwtResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/signUp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Регистрация нового пользователя
         * @description Создает нового пользователя в системе с указанными учетными данными
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Регистрация выполнена успешно */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JwtResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                /** @description Пользователь уже существует */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/assign-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Назначение роли пользователю
         * @description Назначает или изменяет роль существующему пользователю в системе
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AssignRoleRequest"];
                };
            };
            responses: {
                /** @description Роль успешно назначена */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JwtResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/remove-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Удаление роли у пользователя
         * @description Удаляет роль у существующего пользователя в системе
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RemoveRoleRequest"];
                };
            };
            responses: {
                /** @description Роль успешно удалена */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JwtResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Валидация JWT токена
         * @description Проверяет валидность JWT токена из заголовка Authorization
         */
        get: {
            parameters: {
                query?: never;
                header: {
                    /** @description JWT токен в формате "Bearer {token}" */
                    Authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Токен валиден */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JwtResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Обновление JWT токена
         * @description Обновляет access токен, используя refresh токен из куки.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Токен успешно обновлен */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JwtResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users with pagination
         * @description Returns a paginated list of users with sorting and filtering options
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-based) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                    /** @description Sort criteria (e.g., "username,asc" or "email,desc") */
                    sort?: string;
                    /** @description Filter by username (case-insensitive contains) */
                    username?: string;
                    /** @description Filter by role */
                    role?: "ROLE_USER" | "ROLE_ADMIN";
                    /** @description Filter by status */
                    status?: "ACTIVE" | "INACTIVE" | "PENDING";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated list of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserPageResponse"];
                    };
                };
                403: components["responses"]["ForbiddenError"];
            };
        };
        put?: never;
        /**
         * Create a new user
         * @description Creates a new user in the system
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateUserRequest"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
                /** @description User with provided username or email already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Returns a single user by their ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the user to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        /**
         * Update an existing user
         * @description Updates an existing user in the system by their ID
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the user to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserRequest"];
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        post?: never;
        /**
         * Delete a user
         * @description Deletes a user from the system by their ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the user to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users
         * @description Returns a list of all users
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponse"][];
                    };
                };
                403: components["responses"]["ForbiddenError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my profile
         * @description Returns profile of the authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User profile object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProfileResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        /**
         * Update my profile
         * @description Updates profile of the authenticated user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUserRequest"];
                };
            };
            responses: {
                /** @description User profile updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProfileResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        post?: never;
        /**
         * Delete my profile
         * @description Delete profile of the authenticated user
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User profile deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my tasks
         * @description Returns a paginated list of tasks assigned to the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-indexed) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                    /** @description Filter by task status */
                    status?: "AVAILABLE" | "IN_PROGRESS" | "COMPLETED" | "BLOCKED";
                    /** @description Filter by department */
                    department?: "IT" | "HR" | "FINANCE" | "MARKETING" | "SALES" | "CUSTOMER_SERVICE" | "PRODUCTION" | "LOGISTICS" | "RESEARCH_AND_DEVELOPMENT" | "OTHER";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of tasks for the authenticated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskPageResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/tasks/{id}/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Subscribe to a task
         * @description Allows the authenticated user to subscribe to a task
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to subscribe to */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task subscribed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        trace?: never;
    };
    "/me/tasks/{id}/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Unsubscribe from a task
         * @description Allows the authenticated user to unsubscribe from a task
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to unsubscribe from */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task unsubscribed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        trace?: never;
    };
    "/me/tasks/{id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Complete a task
         * @description Allows the authenticated user to mark a task as complete
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to complete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task completed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        trace?: never;
    };
    "/me/tasks/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my task history
         * @description Returns a paginated history of tasks associated with the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-indexed) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of task history events for the authenticated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskPageResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/tasks/available-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available tasks for me
         * @description Returns a paginated list of tasks available for the authenticated user to subscribe to
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-indexed) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                    /** @description Filter by department */
                    department?: "IT" | "HR" | "FINANCE" | "MARKETING" | "SALES" | "CUSTOMER_SERVICE" | "PRODUCTION" | "LOGISTICS" | "RESEARCH_AND_DEVELOPMENT" | "OTHER";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of available tasks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskPageResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/task/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get comments for a task
         * @description Returns a paginated list of comments for a specified task
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-indexed) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                };
                header?: never;
                path: {
                    /** @description ID of the task to retrieve comments for */
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of comments */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommentPageResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        /**
         * Add a comment to a task
         * @description Adds a new comment to a specified task.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to add a comment to */
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCommentRequest"];
                };
            };
            responses: {
                /** @description Comment added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommentResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/task/{taskId}/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a comment
         * @description Updates an existing comment for a specified task
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task the comment belongs to */
                    taskId: string;
                    /** @description ID of the comment to update */
                    commentId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCommentRequest"];
                };
            };
            responses: {
                /** @description Comment updated successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommentResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        post?: never;
        /**
         * Delete a comment
         * @description Deletes a comment from a specified task
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task the comment belongs to */
                    taskId: string;
                    /** @description ID of the comment to delete */
                    commentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Comment deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tasks with pagination and filtering
         * @description Returns a paginated and filtered list of tasks
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-indexed) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                    /** @description Filter by task status */
                    status?: "AVAILABLE" | "IN_PROGRESS" | "COMPLETED" | "BLOCKED";
                    /** @description Filter by assignee ID */
                    assigneeId?: string;
                    /** @description Filter by creator ID */
                    creatorId?: string;
                    /** @description Filter by department */
                    department?: "IT" | "HR" | "FINANCE" | "MARKETING" | "SALES" | "CUSTOMER_SERVICE" | "PRODUCTION" | "LOGISTICS" | "RESEARCH_AND_DEVELOPMENT" | "OTHER";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of tasks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskPageResponse"];
                    };
                };
                403: components["responses"]["ForbiddenError"];
            };
        };
        put?: never;
        /**
         * Create a new task
         * @description Creates a new task in the system
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTaskRequest"];
                };
            };
            responses: {
                /** @description Task created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tasks
         * @description Returns a list of all tasks
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of tasks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"][];
                    };
                };
                403: components["responses"]["ForbiddenError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create tasks in bulk
         * @description Creates multiple tasks in the system
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTaskRequest"][];
                };
            };
            responses: {
                /** @description Tasks created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/due-soon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tasks due soon
         * @description Returns a paginated list of tasks due within a specified number of hours
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of hours until due date */
                    hours?: number;
                    /** @description Page number (0-indexed) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                    /** @description Filter by task status */
                    status?: "AVAILABLE" | "IN_PROGRESS" | "COMPLETED" | "BLOCKED";
                    /** @description Filter by assignee ID */
                    assigneeId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of tasks due soon */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskPageResponse"];
                    };
                };
                403: components["responses"]["ForbiddenError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get task by ID
         * @description Returns a single task by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        /**
         * Update an existing task
         * @description Updates an existing task in the system by its ID
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateTaskRequest"];
                };
            };
            responses: {
                /** @description Task updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        post?: never;
        /**
         * Delete a task
         * @description Deletes a task from the system by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Task deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update task status
         * @description Updates the status of an existing task by its ID
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to update status for */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateStatusRequest"];
                };
            };
            responses: {
                /** @description Task status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        trace?: never;
    };
    "/tasks/{id}/assignees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update assignees for a task
         * @description Updates the assignees for an existing task by its ID
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to update assignees for */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateAssigneesRequest"];
                };
            };
            responses: {
                /** @description Task assignees updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        trace?: never;
    };
    "/tasks/{id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get task history
         * @description Returns a paginated history of changes for a specific task
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-indexed) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                };
                header?: never;
                path: {
                    /** @description ID of the task to retrieve history for */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of task history events */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskPageResponse"];
                    };
                };
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/assignee/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tasks by assignee
         * @description Returns a paginated list of tasks assigned to a specific user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-indexed) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                    /** @description Filter by task status */
                    status?: "AVAILABLE" | "IN_PROGRESS" | "COMPLETED" | "BLOCKED";
                };
                header?: never;
                path: {
                    /** @description ID of the assignee */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A paginated list of tasks for the assignee */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaskPageResponse"];
                    };
                };
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachments/task/{taskId}/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add attachments to a task
         * @description Uploads one or more files as attachments to a specified task.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to add attachments to */
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** @description List of files to upload */
                        files?: string[];
                    };
                };
            };
            responses: {
                /** @description Attachments added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttachmentResponse"][];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachments/task/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attachments for a task
         * @description Returns a list of attachments for a specified task
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task to retrieve attachments for */
                    taskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of attachments */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttachmentResponse"][];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachments/task/{taskId}/{attachmentIds}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete attachments
         * @description Deletes one or more attachments from a task
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the task the attachments belong to */
                    taskId: string;
                    /** @description Comma-separated list of attachment IDs to delete */
                    attachmentIds: string[];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Attachment(s) deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginRequest: {
            username: string;
            /** Format: password */
            password: string;
        };
        JwtResponse: {
            token: string;
            /** Format: uuid */
            id: string;
            username: string;
            roles: ("ROLE_ADMIN" | "ROLE_USER")[];
        };
        Error: {
            message: string;
            code: string;
        };
        RegisterRequest: {
            username: string;
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
            firstName: string;
            lastName: string;
        };
        AssignRoleRequest: {
            /** Format: uuid */
            id: string;
            username: string;
            /** @enum {string} */
            role: "ROLE_USER" | "ROLE_ADMIN";
        };
        RemoveRoleRequest: {
            /** Format: uuid */
            id: string;
            username: string;
            /** @enum {string} */
            role: "ROLE_USER" | "ROLE_ADMIN";
        };
        UserResponse: {
            /** Format: uuid */
            id: string;
            username: string;
            /** Format: email */
            email: string;
            firstName?: string;
            lastName?: string;
            roles: ("ROLE_USER" | "ROLE_ADMIN")[];
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE" | "PENDING";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UserPageResponse: {
            content: components["schemas"]["UserResponse"][];
            /** @description Total number of elements across all pages */
            totalElements: number;
            /** @description Total number of pages */
            totalPages: number;
            /** @description Number of elements per page */
            size: number;
            /** @description Current page number (0-based) */
            number: number;
            /** @description Is this the first page? */
            first?: boolean;
            /** @description Is this the last page? */
            last?: boolean;
            /** @description Number of elements in current page */
            numberOfElements?: number;
            /** @description Is the page empty? */
            empty?: boolean;
        };
        CreateUserRequest: {
            username: string;
            password: string;
            /** Format: email */
            email: string;
            firstName?: string;
            lastName?: string;
            roles?: ("ROLE_USER" | "ROLE_ADMIN")[];
        };
        UpdateUserRequest: {
            username?: string;
            password?: string;
            /** Format: email */
            email?: string;
            firstName?: string;
            lastName?: string;
        };
        ProfileResponse: {
            /** Format: uuid */
            id: string;
            username: string;
            /** Format: email */
            email: string;
            firstName?: string;
            lastName?: string;
            roles: ("ROLE_USER" | "ROLE_ADMIN")[];
        };
        CommentResponse: {
            /** Format: uuid */
            id?: string;
            content?: string;
            /** Format: uuid */
            authorId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        TaskResponse: {
            /** Format: uuid */
            id?: string;
            title?: string;
            description?: string;
            /** @enum {string} */
            status?: "AVAILABLE" | "IN_PROGRESS" | "COMPLETED" | "BLOCKED";
            /** @enum {string} */
            priority?: "LOW" | "MEDIUM" | "HIGH";
            assigneeIds?: string[];
            /** Format: uuid */
            creatorId?: string;
            /** @enum {string} */
            department?: "IT" | "HR" | "FINANCE" | "MARKETING" | "SALES" | "CUSTOMER_SERVICE" | "PRODUCTION" | "LOGISTICS" | "RESEARCH_AND_DEVELOPMENT" | "OTHER";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            dueDate?: string;
            tags?: string[];
            comments?: components["schemas"]["CommentResponse"][];
        };
        TaskPageResponse: {
            content: components["schemas"]["TaskResponse"][];
            /** @description Total number of elements across all pages */
            totalElements: number;
            /** @description Total number of pages */
            totalPages: number;
            /** @description Number of elements per page */
            size: number;
            /** @description Current page number (0-based) */
            number: number;
            /** @description Is this the first page? */
            first?: boolean;
            /** @description Is this the last page? */
            last?: boolean;
            /** @description Number of elements in current page */
            numberOfElements?: number;
            /** @description Is the page empty? */
            empty?: boolean;
        };
        CommentPageResponse: {
            content: components["schemas"]["CommentResponse"][];
            /** @description Total number of elements across all pages */
            totalElements: number;
            /** @description Total number of pages */
            totalPages: number;
            /** @description Number of elements per page */
            size: number;
            /** @description Current page number (0-based) */
            number: number;
            /** @description Is this the first page? */
            first?: boolean;
            /** @description Is this the last page? */
            last?: boolean;
            /** @description Number of elements in current page */
            numberOfElements?: number;
            /** @description Is the page empty? */
            empty?: boolean;
        };
        CreateCommentRequest: {
            content: string;
        };
        UpdateCommentRequest: {
            content: string;
        };
        CreateTaskRequest: {
            title: string;
            description?: string;
            /** @enum {string} */
            priority: "LOW" | "MEDIUM" | "HIGH";
            /** @enum {string} */
            department: "IT" | "HR" | "FINANCE" | "MARKETING" | "SALES" | "CUSTOMER_SERVICE" | "PRODUCTION" | "LOGISTICS" | "RESEARCH_AND_DEVELOPMENT" | "OTHER";
            /** Format: date-time */
            dueDate?: string;
            tags?: string[];
            assigneeIds?: string[];
        };
        UpdateTaskRequest: {
            title?: string;
            description?: string;
            /** @enum {string} */
            status?: "AVAILABLE" | "IN_PROGRESS" | "COMPLETED" | "BLOCKED";
            /** @enum {string} */
            priority?: "LOW" | "MEDIUM" | "HIGH";
            /** Format: date-time */
            dueDate?: string;
            tags?: string[];
            assigneeIds?: string[];
            /** @enum {string} */
            department?: "IT" | "HR" | "FINANCE" | "MARKETING" | "SALES" | "CUSTOMER_SERVICE" | "PRODUCTION" | "LOGISTICS" | "RESEARCH_AND_DEVELOPMENT" | "OTHER";
        };
        UpdateStatusRequest: {
            /** @enum {string} */
            status: "AVAILABLE" | "IN_PROGRESS" | "COMPLETED" | "BLOCKED";
            comment?: string;
        };
        UpdateAssigneesRequest: {
            assigneeIds?: string[];
        };
        AttachmentResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            taskId?: string;
            fileName?: string;
            objectName?: string;
            /** Format: int64 */
            size?: number;
            /** Format: uri */
            url?: string;
            fileType?: string;
            /** Format: date-time */
            createdAt?: string;
        };
    };
    responses: {
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Forbidden */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
