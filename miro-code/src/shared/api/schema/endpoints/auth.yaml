schemas:
  LoginRequest:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
        format: password

  RegisterRequest:
    type: object
    required:
      - username
      - email
      - password
      - firstName
      - lastName
    properties:
      username:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
        format: password
      firstName:
        type: string
      lastName:
        type: string

  JwtResponse:
    type: object
    required:
      - token
      - id
      - username
      - roles
    properties:
      token:
        type: string
      id:
        type: string
        format: uuid
      username:
        type: string
      roles:
        type: array
        items:
          type: string
          enum: [ADMIN, USER, MODERATOR]

  AssignRoleRequest:
    type: object
    required:
      - id
      - username
      - role
    properties:
      id:
        type: string
        format: uuid
      username:
        type: string
      role:
        type: string
        enum: [USER, ADMIN]

  RemoveRoleRequest:
    type: object
    required:
      - id
      - username
      - role
    properties:
      id:
        type: string
        format: uuid
      username:
        type: string
      role:
        type: string
        enum: [USER, ADMIN]

signIn:
  summary: Вход пользователя в систему
  description: Аутентифицирует пользователя и возвращает JWT токен для доступа к защищенным ресурсам
  security: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/LoginRequest'
  responses:
    '200':
      description: Вход выполнен успешно
      content:
        application/json:
          schema:
            $ref: '#/schemas/JwtResponse'
    '401':
      $ref: '../shared/responses.yaml#/UnauthorizedError'
    '400':
      $ref: '../shared/responses.yaml#/BadRequestError'

signUp:
  summary: Регистрация нового пользователя
  description: Создает нового пользователя в системе с указанными учетными данными
  security: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/RegisterRequest'
  responses:
    '201':
      description: Регистрация выполнена успешно
      content:
        application/json:
          schema:
            $ref: '#/schemas/JwtResponse'
    '400':
      $ref: '../shared/responses.yaml#/BadRequestError'
    '409':
      description: Пользователь уже существует

assignRole:
  summary: Назначение роли пользователю
  description: Назначает или изменяет роль существующему пользователю в системе
  security:
    - bearerAuth: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/AssignRoleRequest'
  responses:
    '200':
      description: Роль успешно назначена
      content:
        application/json:
          schema:
            $ref: '#/schemas/JwtResponse'
    '400':
      $ref: '../shared/responses.yaml#/BadRequestError'
    '403':
      $ref: '../shared/responses.yaml#/ForbiddenError'
    '404':
      $ref: '../shared/responses.yaml#/NotFoundError'

removeRole:
  summary: Удаление роли у пользователя
  description: Удаляет роль у существующего пользователя в системе
  security:
    - bearerAuth: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/RemoveRoleRequest'
  responses:
    '200':
      description: Роль успешно удалена
      content:
        application/json:
          schema:
            $ref: '#/schemas/JwtResponse'
    '400':
      $ref: '../shared/responses.yaml#/BadRequestError'
    '403':
      $ref: '../shared/responses.yaml#/ForbiddenError'
    '404':
      $ref: '../shared/responses.yaml#/NotFoundError'

validateToken:
  summary: Валидация JWT токена
  description: Проверяет валидность JWT токена из заголовка Authorization
  security:
    - bearerAuth: []
  parameters:
    - in: header
      name: Authorization
      required: true
      schema:
        type: string
      description: JWT токен в формате "Bearer {token}"
  responses:
    '200':
      description: Токен валиден
      content:
        application/json:
          schema:
            $ref: '#/schemas/JwtResponse'
    '401':
      $ref: '../shared/responses.yaml#/UnauthorizedError'

refresh:
  summary: Обновление JWT токена
  description: Обновляет access токен, используя refresh токен из куки.
  security: []
  responses:
    '200':
      description: Токен успешно обновлен
      content:
        application/json:
          schema:
            $ref: '#/schemas/JwtResponse'
    '401':
      $ref: '../shared/responses.yaml#/UnauthorizedError'