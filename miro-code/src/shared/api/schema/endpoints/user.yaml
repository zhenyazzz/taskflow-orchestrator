schemas:
  CreateUserRequest:
    type: object
    required:
      - username
      - password
      - email
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
        format: email
      firstName:
        type: string
      lastName:
        type: string
      roles:
        type: array
        items:
          type: string
          enum: [ROLE_USER, ROLE_ADMIN]

  UpdateUserRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
        format: email
      firstName:
        type: string
      lastName:
        type: string

  UserResponse:
    type: object
    required:
      - id
      - username
      - email
      - roles
      - status
      - createdAt
    properties:
      id:
        type: string
        format: uuid
      username:
        type: string
      email:
        type: string
        format: email
      firstName:
        type: string
      lastName:
        type: string
      roles:
        type: array
        items:
          type: string
          enum: [ROLE_USER, ROLE_ADMIN]
      status:
        type: string
        enum: [ACTIVE, INACTIVE, PENDING]
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time


  UserPageResponse:
    type: object
    required:
      - content
      - totalElements
      - totalPages
      - size
      - number
    properties:
      content:
        type: array
        items:
          $ref: '#/schemas/UserResponse'
      totalElements:
        type: integer
        description: Total number of elements across all pages
      totalPages:
        type: integer
        description: Total number of pages
      size:
        type: integer
        description: Number of elements per page
      number:
        type: integer
        description: Current page number (0-based)
      first:
        type: boolean
        description: Is this the first page?
      last:
        type: boolean
        description: Is this the last page?
      numberOfElements:
        type: integer
        description: Number of elements in current page
      empty:
        type: boolean
        description: Is the page empty?

getAllUsers:
  summary: Get users with pagination
  description: Returns a paginated list of users with sorting and filtering options
  security:
    - bearerAuth: []
  parameters:
    - in: query
      name: page
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Page number (0-based)
    - in: query
      name: size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page
    - in: query
      name: sort
      schema:
        type: string
        default: "username,asc"
      description: Sort criteria (e.g., "username,asc" or "email,desc")
    - in: query
      name: username
      schema:
        type: string
        default: ""
      description: Filter by username (case-insensitive contains)
    - in: query
      name: role
      schema:
        type: string
        enum: [ROLE_USER, ROLE_ADMIN]
      description: Filter by role
    - in: query
      name: status
      schema:
        type: string
        enum: [ACTIVE, INACTIVE, PENDING]
      description: Filter by status
  responses:
    '200':
      description: Paginated list of users
      content:
        application/json:
          schema:
            $ref: '#/schemas/UserPageResponse'
    '403':
      $ref: '../shared/responses.yaml#/ForbiddenError'

getAllUsersList:
  summary: Get all users
  description: Returns a list of all users
  security:
    - bearerAuth: []
  responses:
    '200':
      description: A list of users
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/schemas/UserResponse'
    '403':
      $ref: '../shared/responses.yaml#/ForbiddenError'

getUserById:
  summary: Get user by ID
  description: Returns a single user by their ID
  security:
    - bearerAuth: []
  parameters:
    - in: path
      name: id
      schema:
        type: string
        format: uuid
      required: true
      description: ID of the user to retrieve
  responses:
    '200':
      description: User object
      content:
        application/json:
          schema:
            $ref: '#/schemas/UserResponse'
    '403':
      $ref: '../shared/responses.yaml#/ForbiddenError'
    '404':
      $ref: '../shared/responses.yaml#/NotFoundError'

updateUser:
  summary: Update an existing user
  description: Updates an existing user in the system by their ID
  security:
    - bearerAuth: []
  parameters:
    - in: path
      name: id
      schema:
        type: string
        format: uuid
      required: true
      description: ID of the user to update
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/UpdateUserRequest'
  responses:
    '200':
      description: User updated successfully
      content:
        application/json:
          schema:
            $ref: '#/schemas/UserResponse'
    '400':
      $ref: '../shared/responses.yaml#/BadRequestError'
    '403':
      $ref: '../shared/responses.yaml#/ForbiddenError'
    '404':
      $ref: '../shared/responses.yaml#/NotFoundError'

deleteUser:
  summary: Delete a user
  description: Deletes a user from the system by their ID
  security:
    - bearerAuth: []
  parameters:
    - in: path
      name: id
      schema:
        type: string
        format: uuid
      required: true
      description: ID of the user to delete
  responses:
    '204':
      description: User deleted successfully
    '403':
      $ref: '../shared/responses.yaml#/ForbiddenError'
    '404':
      $ref: '../shared/responses.yaml#/NotFoundError'

createUser:
  summary: Create a new user
  description: Creates a new user in the system
  security:
    - bearerAuth: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '#/schemas/CreateUserRequest'
  responses:
    '201':
      description: User created successfully
      content:
        application/json:
          schema:
            $ref: '#/schemas/UserResponse'
    '400':
      $ref: '../shared/responses.yaml#/BadRequestError'
    '403':
      $ref: '../shared/responses.yaml#/ForbiddenError'
    '409':
      description: User with provided username or email already exists