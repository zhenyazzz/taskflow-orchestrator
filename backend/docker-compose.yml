services:
  # vault:
  #   image: vault:1.13.3
  #   container_name: vault
  #   ports:
  #     - "8200:8200"
  #   environment:
  #     VAULT_DEV_ROOT_TOKEN_ID: root
  #     VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
  #     VAULT_ADDR: http://localhost:8200
  #   cap_add:
  #     - IPC_LOCK
  #   command: ["vault", "server", "-dev", "-dev-root-token-id=root"]  
    
# docker exec vault sh -c "export VAULT_ADDR=`"http://127.0.0.1:8200`" && vault secrets enable -path=secret kv"
# docker exec vault sh -c "export VAULT_ADDR=`"http://127.0.0.1:8200`" && vault kv put secret/application JWT_SECRET_KEY=your-super-secret-jwt-key"
# docker exec docker exec vault sh -c 'export VAULT_ADDR="http://127.0.0.1:8200" && vault kv put secret/application JWT_SECRET_KEY="aXv7j3tR8kL9mQp2sV5y7x9A1zC4E7H0bW3cZ6u8oP1dF4rT5nJ9iK2lO0q"'
#     docker-compose up -d --build config-service
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data


  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


  eureka-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: eureka-service
    hostname: eureka-service
    ports:
      - "8761:8761"
    depends_on:
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_PORT=8761

  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    container_name: config-service
    hostname: config-service
    ports:
      - "8888:8888"
    depends_on:
      - eureka-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: taskdb
    volumes:
      - mongo_data:/data/db
  # // docker compose exec -it mongo mongosh -u root -p password --authenticationDatabase admin 
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  
      - "9001:9001"   
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      
  redis:
    image: redis:7.2.5-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    hostname: auth-service
    ports:
      - "8081:8081"
    depends_on:
      - config-service
      - eureka-service
      - kafka
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-service:8888

  # user-service:
  #   build:
  #     context: ./user-service
  #     dockerfile: Dockerfile
  #   container_name: user-service
  #   hostname: user-service
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     - config-service
  #     - eureka-service
  #     - kafka
  #     - postgres
  #     - vault
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  
  # task-service:
  #   build:
  #     context: ./task-service
  #     dockerfile: Dockerfile
  #   container_name: task-service
  #   hostname: task-service
  #   ports:
  #     - "8082:8082"
  #   depends_on:
  #     - config-service
  #     - eureka-service
  #     - kafka
  #     - postgres
  #     - vault
  #     - mongo
  #     - minio
  #     - redis
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker

volumes:
  postgres_data:
  mongo_data:
  minio_data:
  redis_data: