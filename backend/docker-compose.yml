#version: '3.8'
#
#services:
#  postgres:
#    image: postgres:15
#    container_name: postgres
#    environment:
#      POSTGRES_USER: user
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: postgres
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    networks:
#      - app-network
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.5.0
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    networks:
#      - app-network
#
#  kafka:
#    image: confluentinc/cp-kafka:7.5.0
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    networks:
#      - app-network
#
#  eureka-service:
#    build:
#      context: ./discovery-service
#      dockerfile: Dockerfile
#    container_name: eureka-service
#    hostname: eureka-service
#    ports:
#      - "8761:8761"
#    depends_on:
#      - kafka
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - EUREKA_SERVER_PORT=8761
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
#    networks:
#      - app-network
#
#  config-service:
#    build:
#      context: ./config-service
#      dockerfile: Dockerfile
#    container_name: config-service
#    hostname: config-service
#    ports:
#      - "8888:8888"
#    depends_on:
#      - eureka-service
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
#    networks:
#      - app-network
#
#  mongo:
#    image: mongo:6.0
#    container_name: mongo
#    ports:
#      - "27017:27017"
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: password
#      MONGO_INITDB_DATABASE: taskdb
#    volumes:
#      - mongo_data:/data/db
#    networks:
#      - app-network
#
#  minio:
#    image: minio/minio:latest
#    container_name: minio
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    environment:
#      MINIO_ROOT_USER: minio
#      MINIO_ROOT_PASSWORD: minio123
#    command: server /data --console-address ":9001"
#    volumes:
#      - minio_data:/data
#    networks:
#      - app-network
#
#  redis:
#    image: redis:7.2.5-alpine
#    container_name: redis
#    ports:
#      - "6379:6379"
#    volumes:
#      - redis_data:/data
#    networks:
#      - app-network
#
#  api-gateway:
#    build:
#      context: ./gateway-service
#      dockerfile: Dockerfile
#    hostname: gateway-service
#    container_name: gateway-service
#    ports:
#      - "8080:8080"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka/
#      - CONFIG_SERVER_URL=http://config-service:8888
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
#    depends_on:
#      - eureka-service
#      - config-service
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#    networks:
#      - app-network
#
#  auth-service:
#    build:
#      context: .
#      dockerfile: auth-service/Dockerfile
#    container_name: auth-service
#    hostname: auth-service
#    ports:
#      - "8081:8081"
#    depends_on:
#      - config-service
#      - eureka-service
#      - kafka
#      - postgres
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - CONFIG_SERVER_URL=http://config-service:8888
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
#    networks:
#      - app-network
#
#volumes:
#  postgres_data:
#  mongo_data:
#  minio_data:
#  redis_data:
#
#networks:
#  app-network:
#    driver: bridge

version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  eureka-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    container_name: eureka-service
    hostname: eureka-service
    ports:
      - "8761:8761"
    depends_on:
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_PORT=8761
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - app-network

  config-service:
    build:
      context: ./config-service
      dockerfile: Dockerfile
    container_name: config-service
    hostname: config-service
    ports:
      - "8888:8888"
    depends_on:
      - eureka-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - app-network

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: taskdb
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network

  redis:
    image: redis:7.2.5-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  api-gateway:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    hostname: gateway-service
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka/
      - CONFIG_SERVER_URL=http://config-service:8888
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - eureka-service
      - config-service
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    hostname: auth-service
    ports:
      - "8081:8081"
    depends_on:
      - config-service
      - eureka-service
      - kafka
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-service:8888
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - app-network

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    hostname: user-service
    ports:
      - "8082:8082"
    depends_on:
      - config-service
      - eureka-service
      - kafka
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_URL=http://config-service:8888
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - app-network

volumes:
  postgres_data:
  mongo_data:
  minio_data:
  redis_data:

networks:
  app-network:
    driver: bridge